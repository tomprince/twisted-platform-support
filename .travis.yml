#
# This is the Travis-CI configuration.
#
# The actual dependency installation and test execution is done via tox as a
# way to share the same process between Travis-CI and Buildbot.
#
language: python
sudo: false


# Only run tests on push on a few branches.
# Test on PR should be execute for all branches and forks.
branches:
  only:
  - master


env:
  global:
    - TRIAL_REPORTER=text


matrix:
  include:
    - python: 2.7
      env: TOXENV=py27-withcov,codecov-publish
    - python: 3.3
      env: TOXENV=py33-withcov,codecov-publish
    - python: 3.4
      env: TOXENV=py34-withcov,codecov-publish
    - python: 3.5
      env: TOXENV=py35-withcov,codecov-publish
    # For now all non-trial tests are in a single job to reduce the time spent
    # on starting separate jobs.
    - python: 2.7
      env: TOXENV=flake8,manifest-checker

    # Wheel builders (manylinux)
    - sudo: required
      services:
        - docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux1_x86_64
    - sudo: required
      services:
        - docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux1_i686
           PRE_CMD=linux32



cache:
  directories:
    - $HOME/.cache/pip
    - $HOME/.pyenv


install:
  - if [[ -n "${TOX_ENV}" ]]; then ./.travis/install.sh tox; fi
  - if [[ -n "${DOCKER_IMAGE}" ]]; then docker pull $DOCKER_IMAGE; fi


script:
  - if [[ -n "${TOX_ENV}" ]]; then ./.travis/run.sh; fi
  - if [[ -n "${DOCKER_IMAGE}" ]]; then docker run --rm -v `pwd`:/io $DOCKER_IMAGE $PRE_CMD /io/.travis/build_wheels.sh; fi

deploy:
  provider: bintray
  file: .travis/bintray.json
  user: hawkieowl
  key:
    secure: "iThKtO9lDqnSKMYtlX6yDodiwLc/NjLuD+pNu4LTPc8nXgZR6SuZR1X8Cr/nUcdM5wfnKU/+5ydxUldLD17TvayK22TZx91vGQOp75UK7npMNahvjdvSf7P9CQjT9JVVuyawzPdt7zPspSHy+7wW6fTLCvDi4rrbtPxzwTI3UqTfkDIFHf8pUz+zKSVT/JkyzbzQgRmoj8ZqiK2ziXBTmeuRCVIlYl+F2kI1jb+3kZqdWJ9FKb7UTEeist9QxB7MfZrHoqpao3r8ZEa9r/Ez4BxMpKfRHU2UdBlF7FjfI4TLkg8PxxtZrqUy6dvZG/O5xD640Nwhc2+5O5Y5IeRkUUQ/16+Fy3FbTZstaCabYiLIqXc2t58pXUjh/23N/KEopaEK+fj3QCjFcu19l8qlJah8BzJ1zyC5deZeCxQDgY9vEN673qB0fdMMupwsOx73g0dCVvyOPTH4ketRfL6Wa6j8LHeoqJlXR+owPO1Qx5g/rAg9KLBlnNnaOONyN8x8x+G10KW4Ow7MIhaR9WevNZwUr3yLfDWmrGpX41m/wC5ZIRLsmVsxwlDGC9fgG2xxb2OcQUcaxsxGBN/bsUcS8OToTTejWCXA14coM087OEAUAgpAKmHviUtHhCoQIHaBaEFPVuLjPNu3J8anKwHfqV9vKQuF5OqSPgqo9wDDLcI="
